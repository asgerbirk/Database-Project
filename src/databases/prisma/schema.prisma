generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bookings {
  BookingID      Int               @id @default(autoincrement())
  ClassID        Int?
  BookingDate    DateTime?         @db.Date
  Status         String?           @db.VarChar(50)
  class          classes?          @relation(fields: [ClassID], references: [ClassID], onDelete: Cascade)
  memberBookings member_bookings[]

  @@index([ClassID], map: "ClassID")
}

model centers {
  CenterID       Int               @id @default(autoincrement())
  CenterName     String?           @db.VarChar(100)
  Location       String?           @db.VarChar(255)
  Phone          String?           @db.VarChar(15)
  Email          String?           @db.VarChar(100)
  OpeningHours   String?           @db.VarChar(100)
  ManagerName    String?           @db.VarChar(100)
  Facilities     String?           @db.VarChar(255)
  centerProducts center_products[]
  classes        classes[]
  employees      employees[]
  equipment      equipment[]
}

model center_products {
  CenterProductID Int      @id @default(autoincrement())
  CenterID        Int
  ProductID       Int
  center          centers  @relation(fields: [CenterID], references: [CenterID], onDelete: Cascade)
  product         products @relation(fields: [ProductID], references: [ProductID], onDelete: Cascade)

  @@unique([CenterID, ProductID])
  @@index([ProductID], map: "center_products_ProductID_fkey")
}

model classes {
  ClassID         Int        @id @default(autoincrement())
  ClassName       String?    @db.VarChar(100)
  Description     String?    @db.VarChar(255)
  ClassType       String?    @db.VarChar(50)
  Duration        Int?
  MaxParticipants Int?
  EmployeeID      Int?
  CenterID        Int?
  ScheduleDate    DateTime?  @db.Date
  StartTime       DateTime?  @db.Time(0)
  EndTime         DateTime?  @db.Time(0)
  bookings        bookings[]
  center          centers?   @relation(fields: [CenterID], references: [CenterID], onDelete: Cascade)
  employee        employees? @relation(fields: [EmployeeID], references: [EmployeeID], onDelete: NoAction, onUpdate: NoAction, map: "classes_ibfk_1")

  @@index([EmployeeID], map: "EmployeeID")
  @@index([CenterID], map: "classes_CenterID_fkey")
}

model equipment {
  MachineID       Int       @id @default(autoincrement())
  MachineName     String?   @db.VarChar(100)
  Type            String?   @db.VarChar(50)
  Location        String?   @db.VarChar(100)
  Manufacturer    String?   @db.VarChar(100)
  PurchaseDate    DateTime? @db.Date
  MaintenanceDate DateTime? @db.Date
  Status          String?   @db.VarChar(50)
  CenterID        Int
  center          centers   @relation(fields: [CenterID], references: [CenterID], onDelete: Cascade)

  @@index([CenterID], map: "CenterID")
}

model jobtitles {
  JobTitleID   Int         @id @default(autoincrement())
  JobTitleName String?     @db.VarChar(100)
  Description  String?     @db.VarChar(255)
  employees    employees[]
}

model employees {
  EmployeeID       Int        @id @default(autoincrement())
  PersonID         Int?       @unique
  HireDate         DateTime?  @db.Date
  JobTitleID       Int?
  DepartmentID     Int?
  Salary           Decimal?   @db.Decimal(10, 2)
  EmploymentStatus String?    @db.VarChar(50)
  CenterID         Int?
  classes          classes[]
  center           centers?   @relation(fields: [CenterID], references: [CenterID])
  jobtitles        jobtitles? @relation(fields: [JobTitleID], references: [JobTitleID], onDelete: NoAction, onUpdate: NoAction)
  person           person?    @relation("PersonToEmployee", fields: [PersonID], references: [PersonID], onDelete: Cascade)

  @@index([DepartmentID], map: "DepartmentID")
  @@index([JobTitleID], map: "JobTitleID")
  @@index([CenterID], map: "employees_CenterID_fkey")
}

model person {
  PersonID    Int        @id @default(autoincrement())
  FirstName   String?    @db.VarChar(100)
  LastName    String?    @db.VarChar(100)
  Email       String?    @unique(map: "Email") @db.VarChar(100)
  Password    String?    @db.VarChar(100)
  Phone       String?    @db.VarChar(15)
  Address     String?    @db.VarChar(255)
  DateOfBirth DateTime?  @db.Date
  Role        Role?
  ImageUrl    String?
  employee    employees? @relation("PersonToEmployee")
  member      members?   @relation("PersonToMember")
}

model members {
  MemberID         Int               @id @default(autoincrement())
  PersonID         Int?              @unique
  JoinDate         DateTime?         @db.Date
  MembershipID     Int?
  EmergencyContact String?           @db.VarChar(15)
  memberBookings   member_bookings[]
  membership       memberships?      @relation(fields: [MembershipID], references: [MembershipID])
  person           person?           @relation("PersonToMember", fields: [PersonID], references: [PersonID], onDelete: Cascade)
  payments         payments[]

  @@index([MembershipID], map: "MembershipID")
}

model member_bookings {
  MemberBookingID Int      @id @default(autoincrement())
  MemberID        Int
  BookingID       Int
  booking         bookings @relation(fields: [BookingID], references: [BookingID], onDelete: Cascade)
  member          members  @relation(fields: [MemberID], references: [MemberID], onDelete: Cascade)

  @@unique([MemberID, BookingID])
  @@index([BookingID], map: "member_bookings_BookingID_fkey")
}

model memberships {
  MembershipID     Int       @id @default(autoincrement())
  MembershipName   String?   @db.VarChar(50)
  PricePerMonth    Decimal?  @db.Decimal(10, 2)
  AccessLevel      String?   @db.VarChar(50)
  Duration         String?   @db.VarChar(50)
  MaxClassBookings Int?
  Description      String?   @db.VarChar(255)
  members          members[]
}

model payments {
  PaymentID     Int       @id @default(autoincrement())
  PaymentDate   DateTime? @db.Date
  Amount        Decimal?  @db.Decimal(10, 2)
  PaymentMethod String?   @db.VarChar(50)
  PaymentType   String?   @db.VarChar(50)
  Status        String?   @db.VarChar(50)
  MemberID      Int?
  member        members?  @relation(fields: [MemberID], references: [MemberID], onDelete: Cascade)

  @@index([MemberID], map: "payments_MemberID_fkey")
}

model productcategories {
  CategoryID   Int        @id @default(autoincrement())
  CategoryName String?    @db.VarChar(100)
  Description  String?    @db.VarChar(255)
  products     products[]
}

model products {
  ProductID       Int               @id @default(autoincrement())
  ProductName     String?           @db.VarChar(100)
  Description     String?           @db.VarChar(255)
  Price           Decimal?          @db.Decimal(10, 2)
  StockQuantity   Int?
  CategoryID      Int
  PaymentID       Int?
  centerProducts  center_products[]
  productcategory productcategories @relation(fields: [CategoryID], references: [CategoryID], onDelete: Cascade)

  @@index([CategoryID], map: "CategoryID")
  @@index([PaymentID], map: "PaymentID")
}

model audit_logs {
  AuditID     Int       @id @default(autoincrement())
  TableName   String?   @db.VarChar(100)
  Action      String?   @db.VarChar(50)
  Before_data String?   @db.Text
  After_data  String?   @db.Text
  Changed_by  Int?
  ChangedDate DateTime? @db.DateTime(0)
}

model archived_bookings {
  BookingID   Int      @id // Use the same BookingID as the primary key
  ClassID     Int?
  BookingDate DateTime?
  Status      String?   @db.VarChar(50)

  @@map("archived_bookings") 
}


enum Role {
  ADMIN
  MEMBER
  MANAGER
  BASIC
}
