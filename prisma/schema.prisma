generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bookings {
  BookingID   Int       @id @default(autoincrement())
  MemberID    Int?
  ClassID     Int?
  BookingDate DateTime? @db.Date
  Status      String?   @db.VarChar(50)
  PaymentID   Int?
  members     members?  @relation(fields: [MemberID], references: [MemberID], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_1")
  classes     classes?  @relation(fields: [ClassID], references: [ClassID], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_2")
  payments    payments? @relation(fields: [PaymentID], references: [PaymentID], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_3")

  @@index([ClassID], map: "ClassID")
  @@index([MemberID], map: "MemberID")
  @@index([PaymentID], map: "PaymentID")
}

model centers {
  CenterID     Int         @id @default(autoincrement())
  CenterName   String?     @db.VarChar(100)
  Location     String?     @db.VarChar(255)
  Phone        String?     @db.VarChar(15)
  Email        String?     @db.VarChar(100)
  OpeningHours String?     @db.VarChar(100)
  ManagerName  String?     @db.VarChar(100)
  Facilities   String?     @db.VarChar(255)
  equipment    equipment[]
}

model classes {
  ClassID          Int               @id @default(autoincrement())
  ClassName        String?           @db.VarChar(100)
  Description      String?           @db.VarChar(255)
  ClassType        String?           @db.VarChar(50)
  Duration         Int?
  MaxParticipants  Int?
  TrainerID        Int?
  ScheduleDate     DateTime?         @db.Date
  StartTime        DateTime?         @db.Time(0)
  EndTime          DateTime?         @db.Time(0)
  bookings         bookings[]
  personaltrainers personaltrainers? @relation(fields: [TrainerID], references: [TrainerID], onDelete: NoAction, onUpdate: NoAction, map: "classes_ibfk_1")

  @@index([TrainerID], map: "TrainerID")
}

model departments {
  DepartmentID                                  Int         @id @default(autoincrement())
  DepartmentName                                String?     @db.VarChar(100)
  ManagerID                                     Int?
  employees_departments_ManagerIDToemployees    employees?  @relation("departments_ManagerIDToemployees", fields: [ManagerID], references: [EmployeeID], onDelete: NoAction, onUpdate: NoAction, map: "departments_ibfk_1")
  employees_employees_DepartmentIDTodepartments employees[] @relation("employees_DepartmentIDTodepartments")

  @@index([ManagerID], map: "ManagerID")
}

model employees {
  EmployeeID                                      Int           @id @default(autoincrement())
  FirstName                                       String?       @db.VarChar(100)
  LastName                                        String?       @db.VarChar(100)
  Email                                           String?       @unique(map: "Email") @db.VarChar(100)
  Phone                                           String?       @db.VarChar(15)
  Address                                         String?       @db.VarChar(255)
  DateOfBirth                                     DateTime?     @db.Date
  HireDate                                        DateTime?     @db.Date
  JobTitleID                                      Int?
  DepartmentID                                    Int?
  Salary                                          Decimal?      @db.Decimal(10, 2)
  EmploymentStatus                                String?       @db.VarChar(50)
  departments_departments_ManagerIDToemployees    departments[] @relation("departments_ManagerIDToemployees")
  jobtitles                                       jobtitles?    @relation(fields: [JobTitleID], references: [JobTitleID], onDelete: NoAction, onUpdate: NoAction, map: "employees_ibfk_1")
  departments_employees_DepartmentIDTodepartments departments?  @relation("employees_DepartmentIDTodepartments", fields: [DepartmentID], references: [DepartmentID], onDelete: NoAction, onUpdate: NoAction, map: "employees_ibfk_2")

  @@index([DepartmentID], map: "DepartmentID")
  @@index([JobTitleID], map: "JobTitleID")
}

model equipment {
  MachineID       Int       @id @default(autoincrement())
  MachineName     String?   @db.VarChar(100)
  Type            String?   @db.VarChar(50)
  Location        String?   @db.VarChar(100)
  Manufacturer    String?   @db.VarChar(100)
  PurchaseDate    DateTime? @db.Date
  MaintenanceDate DateTime? @db.Date
  Status          String?   @db.VarChar(50)
  CenterID        Int?
  centers         centers?  @relation(fields: [CenterID], references: [CenterID], onDelete: NoAction, onUpdate: NoAction, map: "equipment_ibfk_1")

  @@index([CenterID], map: "CenterID")
}

model jobtitles {
  JobTitleID   Int         @id @default(autoincrement())
  JobTitleName String?     @db.VarChar(100)
  Description  String?     @db.VarChar(255)
  employees    employees[]
}

model members {
  MemberID         Int          @id @default(autoincrement())
  FirstName        String?      @db.VarChar(100)
  LastName         String?      @db.VarChar(100)
  Email            String?      @unique(map: "Email") @db.VarChar(100)
  Phone            String?      @db.VarChar(15)
  Address          String?      @db.VarChar(255)
  DateOfBirth      DateTime?    @db.Date
  JoinDate         DateTime?    @db.Date
  MembershipID     Int?
  EmergencyContact String?      @db.VarChar(15)
  bookings         bookings[]
  memberships      memberships? @relation(fields: [MembershipID], references: [MembershipID], onDelete: NoAction, onUpdate: NoAction, map: "members_ibfk_1")
  payments         payments[]

  @@index([MembershipID], map: "MembershipID")
}

model memberships {
  MembershipID     Int       @id @default(autoincrement())
  MembershipName   String?   @db.VarChar(50)
  PricePerMonth    Decimal?  @db.Decimal(10, 2)
  AccessLevel      String?   @db.VarChar(50)
  Duration         String?   @db.VarChar(50)
  MaxClassBookings Int?
  Description      String?   @db.VarChar(255)
  members          members[]
}

model payments {
  PaymentID     Int        @id @default(autoincrement())
  MemberID      Int?
  PaymentDate   DateTime?  @db.Date
  Amount        Decimal?   @db.Decimal(10, 2)
  PaymentMethod String?    @db.VarChar(50)
  PaymentType   String?    @db.VarChar(50)
  Status        String?    @db.VarChar(50)
  bookings      bookings[]
  members       members?   @relation(fields: [MemberID], references: [MemberID], onDelete: NoAction, onUpdate: NoAction, map: "payments_ibfk_1")

  @@index([MemberID], map: "MemberID")
}

model personaltrainers {
  TrainerID            Int       @id @default(autoincrement())
  FirstName            String?   @db.VarChar(100)
  LastName             String?   @db.VarChar(100)
  Phone                String?   @db.VarChar(15)
  Email                String?   @unique(map: "Email") @db.VarChar(100)
  Specialization       String?   @db.VarChar(255)
  YearsOfExperience    Int?
  CertificationDetails String?   @db.VarChar(255)
  classes              classes[]
}

model productcategories {
  CategoryID   Int     @id @default(autoincrement())
  CategoryName String? @db.VarChar(100)
  Description  String? @db.VarChar(255)
}

model products {
  ProductID     Int      @id @default(autoincrement())
  ProductName   String?  @db.VarChar(100)
  Description   String?  @db.VarChar(255)
  Price         Decimal? @db.Decimal(10, 2)
  StockQuantity Int?
  CategoryID    Int?
}
